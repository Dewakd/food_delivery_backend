
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}


enum Role {
  Customer
  Driver
  Restaurant
}

model USER {
  penggunaId    Int      @id @default(autoincrement())
  namaPengguna  String
  email         String   @unique
  password      String
  telepon       String?
  alamat        String?
  role          Role     @map("Role")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  orders        ORDER[]
  
  restaurants   RESTAURANT[]
}


model RESTAURANT {
  restoranId    Int      @id @default(autoincrement())
  nama          String
  alamat        String   @db.Text
  jenisMasakan  String?
  rating        Float?   @default(0)
  jamBuka       String?
  biayaAntar    Float?   @default(0)
  isActive      Boolean  @default(true)
  urlGambar     String?
  telepon       String?
  deskripsi     String?  @db.Text
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  ownerId       Int
  owner         USER     @relation(fields: [ownerId], references: [penggunaId], onDelete: Cascade)

  menuItems     MENU_ITEM[]
  orders        ORDER[]
}


enum DriverStatus {
  Online
  Offline
  Delivering
}

model DELIVERY_DRIVER {
  pengemudiId     Int           @id @default(autoincrement())
  namaPengemudi   String
  telepon         String?
  detailKendaraan String?
  status          DriverStatus? @default(Offline)
  lokasiSaatIni   String?
  rating          Float?        @default(0)
  totalDeliveries Int           @default(0)
  isActive        Boolean       @default(true)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  orders          ORDER[]
}


model MENU_ITEM {
  itemMenuId Int      @id @default(autoincrement())
  nama       String
  deskripsi  String?  @db.Text
  harga      Float
  urlGambar  String?
  isAvailable Boolean @default(true)
  kategori   String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  restoranId Int
  restoran   RESTAURANT @relation(fields: [restoranId], references: [restoranId], onDelete: Cascade)

  orderItems ORDER_ITEM[]
}


model ORDER {
  pesananId         Int       @id @default(autoincrement())
  tanggalPesanan    DateTime? @default(now())
  jumlahTotal       Float
  status            String?   @default("pending")
  alamatAntar       String    @db.Text
  metodePembayaran  String?
  catatanPesanan    String?   @db.Text
  estimasiWaktu     String?
  biayaOngkir       Float?    @default(0)
  biayaLayanan      Float?    @default(0)
  totalBiaya        Float?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  penggunaId Int?
  pengguna   USER?  @relation(fields: [penggunaId], references: [penggunaId], onDelete: SetNull)
  
  restoranId Int?
  restoran   RESTAURANT? @relation(fields: [restoranId], references: [restoranId], onDelete: SetNull)
  
  pengemudiId Int?
  pengemudi   DELIVERY_DRIVER? @relation(fields: [pengemudiId], references: [pengemudiId], onDelete: SetNull)

  items             ORDER_ITEM[]
}


model ORDER_ITEM {
  itemPesananId   Int     @id @default(autoincrement())
  quantity        Int
  instruksiKhusus String? @db.Text
  hargaSatuan     Float
  totalHarga      Float
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  pesananId Int
  pesanan   ORDER @relation(fields: [pesananId], references: [pesananId], onDelete: Cascade)
  
  itemMenuId Int?
  menuItem   MENU_ITEM? @relation(fields: [itemMenuId], references: [itemMenuId], onDelete: SetNull)
}
