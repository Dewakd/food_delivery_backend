# Food Delivery Backend - Test Queries
# Updated to reflect current system with restaurant ownership security
# Copy these queries to GraphQL Playground to test your API

# =================
# USER MANAGEMENT
# =================

# 1. Register a customer
mutation RegisterCustomer {
  registerUser(
    email: "customer@test.com"
    namaPengguna: "Test Customer"
    password: "password123"
    role: Customer
    telepon: "081234567890"
    alamat: "Jl. Test Customer No. 123"
  ) {
    token
    user {
      penggunaId
      email
      namaPengguna
      role
      createdAt
    }
  }
}

# 2. Register a restaurant owner
mutation RegisterRestaurant {
  registerUser(
    email: "restaurant@test.com"
    namaPengguna: "Test Restaurant Owner"
    password: "password123"
    role: Restaurant
    telepon: "081234567891"
    alamat: "Jl. Test Restaurant No. 456"
  ) {
    token
    user {
      penggunaId
      email
      namaPengguna
      role
      createdAt
      restaurants {
        restoranId
        nama
      }
    }
  }
}

# 3. Register a driver
mutation RegisterDriver {
  registerUser(
    email: "driver@test.com"
    namaPengguna: "Test Driver"
    password: "password123"
    role: Driver
    telepon: "081234567892"
    alamat: "Jl. Test Driver No. 789"
  ) {
    token
    user {
      penggunaId
      email
      namaPengguna
      role
      createdAt
    }
  }
}

# 4. Login user
mutation LoginUser {
  loginUser(email: "customer@test.com", password: "password123") {
    token
    user {
      penggunaId
      email
      namaPengguna
      role
    }
  }
}

# 5. Get current user profile (requires auth)
query Me {
  me {
    penggunaId
    email
    namaPengguna
    telepon
    alamat
    role
    createdAt
    updatedAt
    restaurants {
      restoranId
      nama
      isActive
    }
  }
}

# 6. Update profile (requires auth)
mutation UpdateProfile {
  updateProfile(input: {
    namaPengguna: "Updated Customer Name"
    telepon: "081999999999"
    alamat: "Jl. New Address No. 999"
  }) {
    penggunaId
    namaPengguna
    telepon
    alamat
    updatedAt
  }
}

# 7. Change password (requires auth)
mutation ChangePassword {
  changePassword(input: {
    currentPassword: "password123"
    newPassword: "newpassword123"
  })
}

# 8. Get all users (requires Restaurant/Driver role)
query GetAllUsers {
  getAllUsers {
    penggunaId
    email
    namaPengguna
    role
    createdAt
  }
}

# 9. Search users (requires Restaurant/Driver role)
query SearchUsers {
  searchUsers(searchTerm: "test") {
    penggunaId
    email
    namaPengguna
    role
  }
}

# =================
# RESTAURANT MANAGEMENT (WITH OWNERSHIP SECURITY)
# =================

# 10. Create restaurant (requires Restaurant role auth) - SECURE: Auto-assigns owner
mutation CreateRestaurant {
  createRestaurant(input: {
    nama: "Test Restaurant"
    alamat: "Jl. Restaurant Test No. 123"
    jenisMasakan: "Indonesian"
    jamBuka: "08:00 - 22:00"
    biayaAntar: 5000
    telepon: "081555666777"
    deskripsi: "Authentic Indonesian cuisine"
    urlGambar: "https://example.com/restaurant.jpg"
  }) {
    restoranId
    nama
    alamat
    jenisMasakan
    jamBuka
    biayaAntar
    isActive
    createdAt
    owner {
      penggunaId
      namaPengguna
      email
    }
  }
}

# 11. Get my restaurant (requires Restaurant role auth) - SECURE: Only owner's restaurant
query GetMyRestaurant {
  getMyRestaurant {
    restoranId
    nama
    alamat
    jenisMasakan
    rating
    jamBuka
    biayaAntar
    isActive
    urlGambar
    telepon
    deskripsi
    owner {
      penggunaId
      namaPengguna
    }
    menuItems {
      itemMenuId
      nama
      harga
      isAvailable
    }
  }
}

# 12. Get all my restaurants (requires Restaurant role auth) - NEW: Multiple restaurants per owner
query GetMyRestaurants {
  getMyRestaurants {
    restoranId
    nama
    alamat
    jenisMasakan
    rating
    isActive
    totalOrders
    averageRating
    owner {
      penggunaId
      namaPengguna
    }
  }
}

# 13. Update restaurant (requires Restaurant role auth) - SECURE: Only owner can update
mutation UpdateRestaurant {
  updateRestaurant(id: "1", input: {
    nama: "Updated Restaurant Name"
    deskripsi: "Updated description"
    jamBuka: "09:00 - 23:00"
    biayaAntar: 7000
    isActive: true
  }) {
    restoranId
    nama
    deskripsi
    jamBuka
    biayaAntar
    isActive
    updatedAt
  }
}

# 14. Toggle restaurant status (requires Restaurant role auth) - SECURE: Only owner can toggle
mutation ToggleRestaurantStatus {
  toggleRestaurantStatus(id: "1") {
    restoranId
    nama
    isActive
    updatedAt
  }
}

# 15. Get all restaurants (public)
query GetAllRestaurants {
  getAllRestaurants(limit: 10) {
    restoranId
    nama
    alamat
    jenisMasakan
    rating
    jamBuka
    biayaAntar
    isActive
    urlGambar
    telepon
    deskripsi
    totalOrders
    averageRating
    owner {
      namaPengguna
    }
  }
}

# 16. Search restaurants (public)
query SearchRestaurants {
  searchRestaurants(searchTerm: "Indonesian", limit: 5) {
    restoranId
    nama
    alamat
    jenisMasakan
    rating
    biayaAntar
    urlGambar
  }
}

# 17. Filter restaurants (public)
query FilterRestaurants {
  getAllRestaurants(
    filter: {
      jenisMasakan: "Indonesian"
      minRating: 4.0
      maxBiayaAntar: 10000
      isActive: true
    }
    sortBy: RATING_DESC
    limit: 5
  ) {
    restoranId
    nama
    jenisMasakan
    rating
    biayaAntar
    isActive
  }
}

# =================
# MENU ITEM MANAGEMENT (WITH OWNERSHIP SECURITY)
# =================

# 18. Create menu item (requires Restaurant role auth) - SECURE: Only for owned restaurants
mutation CreateMenuItem {
  createMenuItem(input: {
    nama: "Nasi Goreng"
    deskripsi: "Delicious Indonesian fried rice"
    harga: 25000
    kategori: "Main Course"
    urlGambar: "https://example.com/nasigoreng.jpg"
    restoranId: "1"
  }) {
    itemMenuId
    nama
    deskripsi
    harga
    kategori
    urlGambar
    isAvailable
    createdAt
    restoran {
      restoranId
      nama
      owner {
        namaPengguna
      }
    }
  }
}

# 19. Create another menu item - SECURE: Only for owned restaurants
mutation CreateMenuItem2 {
  createMenuItem(input: {
    nama: "Gado-Gado"
    deskripsi: "Indonesian salad with peanut sauce"
    harga: 20000
    kategori: "Appetizer"
    urlGambar: "https://example.com/gadogado.jpg"
    restoranId: "1"
  }) {
    itemMenuId
    nama
    deskripsi
    harga
    kategori
    urlGambar
    isAvailable
    createdAt
  }
}

# 20. Update menu item (requires Restaurant role auth) - SECURE: Only owner can update
mutation UpdateMenuItem {
  updateMenuItem(id: "1", input: {
    nama: "Special Nasi Goreng"
    deskripsi: "Extra special Indonesian fried rice"
    harga: 30000
    isAvailable: true
  }) {
    itemMenuId
    nama
    deskripsi
    harga
    isAvailable
    updatedAt
  }
}

# 21. Toggle menu item availability (requires Restaurant role auth) - SECURE: Only owner can toggle
mutation ToggleMenuItemAvailability {
  toggleMenuItemAvailability(id: "1") {
    itemMenuId
    nama
    isAvailable
    updatedAt
  }
}

# 22. Delete menu item (requires Restaurant role auth) - SECURE: Only owner can delete
mutation DeleteMenuItem {
  deleteMenuItem(id: "2")
}

# 23. Get menu items by restaurant (public)
query GetMenuItems {
  getMenuItemsByRestaurant(restoranId: "1") {
    itemMenuId
    nama
    deskripsi
    harga
    kategori
    urlGambar
    isAvailable
  }
}

# 24. Search menu items in restaurant (public)
query SearchMenuItems {
  searchMenuItems(restoranId: "1", searchTerm: "nasi") {
    itemMenuId
    nama
    deskripsi
    harga
    kategori
    isAvailable
  }
}

# 25. Get menu items by category (public)
query GetMenuItemsByCategory {
  getMenuItemsByCategory(restoranId: "1", kategori: "Main Course") {
    itemMenuId
    nama
    deskripsi
    harga
    isAvailable
  }
}

# =================
# DRIVER MANAGEMENT
# =================

# 26. Create driver profile (requires Driver role auth)
mutation CreateDriverProfile {
  createDriverProfile(input: {
    namaPengemudi: "Test Driver Profile"
    telepon: "081777888999"
    detailKendaraan: "Honda Beat - B 1234 XYZ"
    lokasiSaatIni: "Jakarta Pusat"
  }) {
    pengemudiId
    namaPengemudi
    telepon
    detailKendaraan
    status
    lokasiSaatIni
    rating
    totalDeliveries
    isActive
    createdAt
  }
}

# 27. Update driver profile (requires Driver role auth)
mutation UpdateDriverProfile {
  updateDriverProfile(input: {
    namaPengemudi: "Updated Driver Name"
    telepon: "081888999000"
    detailKendaraan: "Honda Vario - B 5678 ABC"
    lokasiSaatIni: "Jakarta Selatan"
  }) {
    pengemudiId
    namaPengemudi
    telepon
    detailKendaraan
    lokasiSaatIni
    updatedAt
  }
}

# 28. Go online (requires Driver role auth)
mutation GoOnline {
  goOnline {
    pengemudiId
    status
    updatedAt
  }
}

# 29. Go offline (requires Driver role auth)
mutation GoOffline {
  goOffline {
    pengemudiId
    status
    updatedAt
  }
}

# 30. Update driver location (requires Driver role auth)
mutation UpdateDriverLocation {
  updateDriverLocation(input: {
    lokasiSaatIni: "Jakarta Barat"
  }) {
    pengemudiId
    lokasiSaatIni
    updatedAt
  }
}

# 31. Get my driver profile (requires Driver role auth)
query GetMyDriverProfile {
  getMyDriverProfile {
    pengemudiId
    namaPengemudi
    telepon
    detailKendaraan
    status
    lokasiSaatIni
    rating
    totalDeliveries
    isActive
  }
}

# 32. Get available orders for delivery (requires Driver role auth)
query GetAvailableOrders {
  getAvailableOrders(limit: 5) {
    pesananId
    alamatAntar
    jumlahTotal
    estimasiWaktu
    restoran {
      nama
      alamat
      telepon
    }
    pengguna {
      namaPengguna
      telepon
    }
  }
}

# 33. Get my active delivery (requires Driver role auth)
query GetMyActiveDelivery {
  getMyActiveDelivery {
    pesananId
    alamatAntar
    jumlahTotal
    status
    restoran {
      nama
      alamat
    }
    pengguna {
      namaPengguna
      telepon
    }
  }
}

# 34. Get my delivery history (requires Driver role auth)
query GetMyDeliveryHistory {
  getMyDeliveryHistory(limit: 10) {
    pesananId
    alamatAntar
    jumlahTotal
    status
    tanggalPesanan
    restoran {
      nama
    }
    pengguna {
      namaPengguna
    }
  }
}

# =================
# ORDER MANAGEMENT
# =================

# 35. Create order (requires Customer role auth)
mutation CreateOrder {
  createOrder(input: {
    restoranId: "1"
    alamatAntar: "Jl. Delivery Address No. 456, Jakarta"
    metodePembayaran: e_wallet
    catatanPesanan: "Please deliver to the front door"
    items: [
      {
        itemMenuId: "1"
        quantity: 2
        instruksiKhusus: "Extra spicy"
      },
      {
        itemMenuId: "2"
        quantity: 1
        instruksiKhusus: "No peanuts"
      }
    ]
  }) {
    pesananId
    tanggalPesanan
    jumlahTotal
    status
    alamatAntar
    metodePembayaran
    catatanPesanan
    biayaOngkir
    biayaLayanan
    totalBiaya
    penggunaId
    restoranId
    pengemudiId
    createdAt
    restoran {
      nama
      alamat
    }
  }
}

# 36. Get my orders (requires Customer auth)
query GetMyOrders {
  getMyOrders(limit: 10) {
    pesananId
    tanggalPesanan
    jumlahTotal
    status
    alamatAntar
    metodePembayaran
    estimasiWaktu
    totalBiaya
    penggunaId
    restoranId
    pengemudiId
    restoran {
      nama
      alamat
    }
    pengemudi {
      namaPengemudi
      telepon
    }
    totalItems
  }
}

# 37. Get pending orders (requires Restaurant role auth)
query GetPendingOrders {
  getPendingOrders {
    pesananId
    tanggalPesanan
    jumlahTotal
    alamatAntar
    metodePembayaran
    catatanPesanan
    penggunaId
    restoranId
    pengguna {
      namaPengguna
      telepon
      alamat
    }
    items {
      quantity
      instruksiKhusus
      hargaSatuan
      totalHarga
      menuItem {
        nama
        deskripsi
      }
    }
  }
}

# 38. Confirm order (requires Restaurant role auth)
mutation ConfirmOrder {
  confirmOrder(orderId: "1", estimasiWaktu: "30 minutes") {
    pesananId
    status
    estimasiWaktu
    updatedAt
  }
}

# 39. Update order status to ready (requires Restaurant role auth)
mutation UpdateOrderToReady {
  updateOrderStatus(input: {
    orderId: "1"
    status: ready
    estimasiWaktu: "Ready for pickup"
  }) {
    pesananId
    status
    estimasiWaktu
    updatedAt
  }
}

# 40. Accept delivery order (requires Driver role auth)
mutation AcceptDelivery {
  acceptDelivery(orderId: "1") {
    pesananId
    status
    pengemudiId
    updatedAt
  }
}

# 41. Accept order (Driver accepts the order assignment)
mutation AcceptOrder {
  acceptOrder(orderId: "1") {
    pesananId
    status
    pengemudiId
    updatedAt
  }
}

# 42. Start delivery (requires Driver role auth)
mutation StartDelivery {
  startDelivery(orderId: "1") {
    pengemudiId
    status
    updatedAt
  }
}

# 43. Complete delivery (requires Driver role auth)
mutation CompleteDelivery {
  completeDelivery(orderId: "1") {
    pengemudiId
    status
    totalDeliveries
    updatedAt
  }
}

# 44. Cancel order
mutation CancelOrder {
  cancelOrder(orderId: "1", reason: "Changed my mind") {
    pesananId
    status
    catatanPesanan
    updatedAt
  }
}

# 45. Reject order (requires Restaurant role auth)
mutation RejectOrder {
  rejectOrder(orderId: "1", reason: "Out of ingredients") {
    pesananId
    status
    catatanPesanan
    updatedAt
  }
}

# 46. Get order details
query GetOrderDetails {
  getOrderById(id: "1") {
    pesananId
    tanggalPesanan
    jumlahTotal
    status
    alamatAntar
    metodePembayaran
    catatanPesanan
    estimasiWaktu
    biayaOngkir
    biayaLayanan
    totalBiaya
    penggunaId
    restoranId
    pengemudiId
    createdAt
    updatedAt
    pengguna {
      namaPengguna
      telepon
      alamat
    }
    restoran {
      nama
      alamat
      telepon
    }
    pengemudi {
      namaPengemudi
      telepon
    }
    items {
      itemPesananId
      quantity
      instruksiKhusus
      hargaSatuan
      totalHarga
      menuItem {
        nama
        deskripsi
        urlGambar
      }
    }
    totalItems
  }
}

# =================
# ORDER ITEM MANAGEMENT
# =================

# 47. Add item to existing order (requires Customer auth for pending orders)
mutation AddItemToOrder {
  addItemToOrder(input: {
    pesananId: "1"
    itemMenuId: "2"
    quantity: 1
    instruksiKhusus: "Medium spice level"
  }) {
    itemPesananId
    quantity
    instruksiKhusus
    hargaSatuan
    totalHarga
    menuItem {
      nama
      harga
    }
  }
}

# 48. Update order item quantity (requires Customer auth for pending orders)
mutation UpdateOrderItem {
  updateOrderItem(id: "1", input: {
    quantity: 3
    instruksiKhusus: "Extra sauce"
  }) {
    itemPesananId
    quantity
    instruksiKhusus
    totalHarga
    updatedAt
  }
}

# 49. Remove item from order (requires Customer auth for pending orders)
mutation RemoveItemFromOrder {
  removeItemFromOrder(id: "1")
}

# 50. Get order items for an order
query GetOrderItems {
  getOrderItemsByOrder(orderId: "1") {
    itemPesananId
    quantity
    instruksiKhusus
    hargaSatuan
    totalHarga
    menuItem {
      nama
      deskripsi
      urlGambar
    }
  }
}

# 51. Add multiple items to order
mutation AddMultipleItems {
  addMultipleItemsToOrder(
    pesananId: "1"
    items: [
      {
        itemMenuId: "1"
        quantity: 2
        instruksiKhusus: "Spicy"
      },
      {
        itemMenuId: "2"
        quantity: 1
        instruksiKhusus: "No nuts"
      }
    ]
  ) {
    itemPesananId
    quantity
    totalHarga
    menuItem {
      nama
      harga
    }
  }
}

# 52. Remove multiple items from order
mutation RemoveMultipleItems {
  removeMultipleItemsFromOrder(itemIds: ["1", "2"])
}

# 53. Update order item quantities (bulk update)
mutation UpdateOrderItemQuantities {
  updateOrderItemQuantities(updates: [
    {
      itemPesananId: "1"
      quantity: 3
    },
    {
      itemPesananId: "2"
      quantity: 2
    }
  ]) {
    itemPesananId
    quantity
    totalHarga
    updatedAt
  }
}

# 54. Get popular order items
query GetPopularOrderItems {
  getPopularOrderItems(restoranId: "1", limit: 5) {
    itemPesananId
    quantity
    totalHarga
    menuItem {
      nama
      harga
      urlGambar
    }
  }
}

# =================
# STATISTICS & ANALYTICS
# =================

# 55. Get order statistics
query GetOrderStats {
  getOrderStats(dateFrom: "2024-01-01", dateTo: "2024-12-31") {
    totalOrders
    totalRevenue
    averageOrderValue
    completedOrders
    cancelledOrders
    pendingOrders
  }
}

# 56. Get restaurant-specific order stats
query GetRestaurantOrderStats {
  getOrderStats(restoranId: "1", dateFrom: "2024-01-01", dateTo: "2024-12-31") {
    totalOrders
    totalRevenue
    averageOrderValue
    completedOrders
    cancelledOrders
    pendingOrders
  }
}

# 57. Get order item statistics
query GetOrderItemStats {
  getOrderItemStats(restoranId: "1", dateFrom: "2024-01-01", dateTo: "2024-12-31") {
    totalQuantity
    totalValue
    averageQuantityPerOrder
    popularItems {
      nama
      harga
      kategori
    }
  }
}

# =================
# FILTERING & SEARCHING
# =================

# 58. Filter orders (requires Restaurant auth)
query FilterOrders {
  getAllOrders(
    filter: {
      status: pending
      metodePembayaran: e_wallet
      minTotal: 50000
      dateFrom: "2024-01-01"
      dateTo: "2024-12-31"
    }
    sortBy: DATE_DESC
    limit: 10
  ) {
    pesananId
    tanggalPesanan
    jumlahTotal
    status
    metodePembayaran
    pengguna {
      namaPengguna
    }
  }
}

# 59. Get restaurants by cuisine type
query GetRestaurantsByType {
  getRestaurantsByType(jenisMasakan: "Indonesian") {
    restoranId
    nama
    alamat
    rating
    biayaAntar
    urlGambar
  }
}

# 60. Get popular restaurants
query GetPopularRestaurants {
  getPopularRestaurants(limit: 5) {
    restoranId
    nama
    alamat
    jenisMasakan
    rating
    biayaAntar
    urlGambar
  }
}

# =================
# ERROR HANDLING TESTS
# =================

# 61. Test unauthorized access (should fail without auth)
query TestUnauthorized {
  me {
    penggunaId
    email
  }
}

# 62. Test invalid order ID (should return error)
query TestInvalidOrderId {
  getOrderById(id: "999999") {
    pesananId
    status
  }
}

# 63. Test invalid restaurant ID (should return error)
query TestInvalidRestaurantId {
  getRestaurantById(id: "999999") {
    restoranId
    nama
  }
}

# 64. Test creating menu item for restaurant you don't own (should fail)
mutation TestUnauthorizedMenuItemCreation {
  createMenuItem(input: {
    nama: "Unauthorized Item"
    deskripsi: "This should fail"
    harga: 10000
    kategori: "Test"
    restoranId: "999"
  }) {
    itemMenuId
    nama
  }
}

# =================
# RELATIONSHIP TESTS
# =================

# 65. Test restaurant owner relationship
query TestRestaurantOwnership {
  getRestaurantById(id: "1") {
    restoranId
    nama
    owner {
      penggunaId
      namaPengguna
      email
      role
    }
    menuItems {
      itemMenuId
      nama
      harga
    }
  }
}

# 66. Test user restaurants relationship
query TestUserRestaurants {
  getUserById(id: "2") {
    penggunaId
    namaPengguna
    role
    restaurants {
      restoranId
      nama
      isActive
      totalOrders
    }
  }
}

# =================
# COMPLETE WORKFLOW TEST
# =================

# 67. Complete order workflow test
# Step 1: Customer creates order (use mutation #35 CreateOrder)
# Step 2: Restaurant confirms order (use mutation #38 ConfirmOrder)  
# Step 3: Restaurant marks ready (use mutation #39 UpdateOrderToReady)
# Step 4: Driver accepts delivery (use mutation #40 AcceptDelivery)
# Step 5: Driver starts delivery (use mutation #42 StartDelivery)
# Step 6: Driver completes delivery (use mutation #43 CompleteDelivery)

# Final verification - check completed order
query VerifyCompletedOrder {
  getOrderById(id: "1") {
    pesananId
    status
    tanggalPesanan
    totalBiaya
    pengguna {
      namaPengguna
    }
    restoran {
      nama
    }
    pengemudi {
      namaPengemudi
      totalDeliveries
    }
  }
} 